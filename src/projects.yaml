School projects (EE/CS):
  "Exploring RDBMS ORM usage in Haskell":
    anchor: rdbms_orm
    year: 2021
    desc: "Used the Haskell Beam ORM library to interface with a sample PostgreSQL test fixture (schema), and explored the trade-offs of ORMs in a non-OOP language. Explored various RDBMS concepts such as CTEs, correlated subqueries, one-to-many and many-to-many relationships, foreign key constraints, ORM libraries, etc. Also discovered a type error in the Beam library that leads disallows certain valid queries, as well as a workaround using roughly-equivalent queries."
    links:
      Source/report: https://github.com/jlam55555/ece464-databases/tree/master/pset1
  "Variation on a Scheme: multiple implicit first-class continuations (and a general attempt at understanding continuations)":
    anchor: multi_cont
    year: 2021
    desc: 'Two goals are achieved: the extension of a <code>call/cc</code>-like interface to support multiple simultaneous continuations using an internal CPS representation, modeled after the nondeterministic interpreter from <em>Structure and Interpretation of Computer Programs</em>; and a comparative exploration aimed towards students unaccostomed to CPS (e.g., imperative programmers). The exploration also delineates common use cases for continuations and some notes about implementation.'
    links:
      Source: https://github.com/jlam55555/sicp/tree/master/cont
      Report: http://files.lambdalambda.ninja/reports/21_summer/ece491_continuations.pdf
  Color organ implementation:
    anchor: color_organ
    year: 2021
    desc: 'A color organ is a speaker with lights that light up when certain frequencies are played. We implemented a very simple version, mainly comprising a set of active bandpass filters lighting up LEDs for three frequency bands, and a power amplifier to drive the speakers. (a.k.a. SSSSS: Seventies-Style Sight and Sound System). The built product achieves its role as a school project, but the power design is not well-calculated (leading to excessive heat generation and speaker blowout) and the filtering method (thresholding with momentum for detection and denoising) is naive.'
    links:
      Report: http://files.lambdalambda.ninja/reports/20-21_spring/ece394_color_organ_report.lam_lee.pdf
      Presentation: http://files.lambdalambda.ninja/reports/20-21_spring/ece394_color_organ_presentation.lam_lee.pdf
      Video: http://files.lambdalambda.ninja/reports/20-21_spring/ece394_color_organ_video.lam_lee.mp4
  Canny edge detector in CUDA:
    anchor: canny
    year: 2021
    desc: The canny algorithm is a common multi-stage algorithm for edge detection in image processing. The standard algorithm is implemented on CUDA and performance is compared to a single-threaded CPU version. Several proposed algorithms from Luo and Duraiswami (2008) are implemented (including tiling, factoring, and a localized version of graph search) and compared to the naive versions, achieving the theoretical speedup.
    links:
      Source: https://github.com/jlam55555/cuda-canny
      Report: http://files.lambdalambda.ninja/reports/20-21_spring/ece453_canny_cuda.pdf
      Presentation: http://files.lambdalambda.ninja/reports/20-21_spring/ece453_canny_cuda_presentation.pdf
  C99 compiler:
    anchor: compiler
    year: 2021
    desc: A (poor) C99 compiler for the compilers class. Aims to implement a reasonable chunk of the C99 standard. The compiler was built using the standard compiler tools flex (lex) and bison (yacc). Successive assignments included lexing; parsing (expressions, declarations, statements); quad generation; and target code generation. Builds working but very unoptimized x86_64 target code (no time to learn register allocation, so all temporaries are memory-backed). The compiler generates correct output for several test cases using the supported parts of the C99 grammar.
    links:
      Source: https://github.com/jlam55555/c99-compiler
  Cloud convex hull:
    anchor: convex_hull
    year: 2021
    desc: A convex hull cloud service, built on AWS in order to be scalable, highly-available, and performant. Built serverless on top of S3, Lambda, and API Gateway. Users can upload an .obj 3-D model and download or preview the convex hull of that object. Uses <a href='https://github.com/markus-wa/quickhull-go'>@markus-wa/quickhull-go</a> for a 3-D Golang QuickHull (convex hull) implementation. Front-end powered by Vue, back-end (lambdas) written in Golang. (Also wrote a 2-D quickhull implementation and failed to write a complete 3-D quickhull implementation in the time provided, included in the source repository.)
    links:
      Source: https://github.com/jlam55555/cloud-convex-hull
      Presentation: http://files.lambdalambda.ninja/reports/20-21_spring/ece465_cloud_convex_hull_presentation.pdf
  Parallel graph coloring:
    anchor: graph_color
    year: 2021
    desc: Graph coloring using the Gebremedhin-Manne distributed-memory speculative coloring algorithm for the ECE453 Cloud Computing. The goal is to achieve speedup with parallel (CPU) computation of a real distributed computing algorithm. The first assignment was to implement this on a multi-threaded single-node application, and the second assignment was to extend to multiple nodes. While this particular algorithm scaled well onto multiple threads (a distributed-memory, single-node architecture), high communication costs between nodes and insufficient network speeds prevented a speedup.
    links:
      Checkpoint 1 README: https://github.com/jlam55555/parallel-graph-coloring/blob/master/src/proj1/README.md
      Checkpoint 2 README: https://github.com/jlam55555/parallel-graph-coloring/tree/master/src/proj2/README.md
      Checkpoint 2 visuals: http://files.lambdalambda.ninja/reports/20-21_spring/ece465_proj2b.lam_son.pdf
      Source: https://github.com/jlam55555/parallel-graph-coloring
  Lucy-Richardson Deconvolution on CUDA:
    anchor: lr_deconv_cuda
    year: 2021
    desc: Lucy-Richardson is a blind (i.e., without a-priori information of the blur mechanism) iterative deconvolution algorithm used to deblur an image. CUDA version compared with CPU version in terms of accuracy and speed. Deblurring effectiveness was evaluated using a LoG filter (edge detector). CUDA acceleration achieved an order of magnitude speed improvement with a naive implementation. Additional tiling and factoring improved speedups even more.
    links:
      Report: http://files.lambdalambda.ninja/reports/20-21_spring/ece453_proj1_deblur.pdf
      Source: https://github.com/jlam55555/lucy-richardson-deconv-cuda
  CYK parser:
    anchor: cyk_parser
    year: 2021
    desc: Parse tree generator using CYK algorithm on a Chomsky-Normal Form (CNF) grammar for ECE467. The CYK algorithm is a dynamic programming approach to generating all valid parses of a CNF grammar. The resulting parses are pretty-printed in a LISP-like tree format. Several test cases are provided on a simple grammar.
    links:
      Source: https://github.com/jlam55555/cyk-parser
  Naive Bayes text categorization:
    anchor: naive_bayes
    year: 2021
    desc: Naive Bayes bag-of-words (supervised) text categorization on three sample corpora. Uses the NLTK word tokenizer and Laplace (+1) smoothing.
    links:
      Source: https://github.com/jlam55555/naive-bayes-text-categorization
      Report: http://files.lambdalambda.ninja/reports/20-21_spring/ece467_naive_bayes_tc.pdf
  Neural network in Scheme Lisp:
    anchor: nn_scheme
    year: 2020
    desc: 'Neural network written in Scheme. Uses naive, mostly-functional approaches (linked-list-based) to typically imperative (array-based) approaches, at the cost of performance. "Classes" for different layer types (sigmoid, dense, and loss layers) are implemented as a polymorphic <code>(train-lambda, infer-lambda, weights)</code> tuple. Default weights can be specified (for deterministic results) or randomly generated. Using LISP allows interactive debugging and support using the native interpreter (as opposed to a difficult-to-use C "REPL" like gdb). Tested on several small datasets.'
    links:
      Source: https://github.com/jlam55555/nn-scheme
      Report: http://files.lambdalambda.ninja/reports/20-21_fall/ece469_proj2_nn_scheme.pdf
  Searching for a more minimal intrinsic dimension of objective landscapes:
    anchor: intrinsic_dimensions
    year: 2020
    desc: We base our methods and intuition off of <a href="https://arxiv.org/abs/1804.08838">Li et al. (2018)</a>, which attempts to define and estimate an &quot;intrinsic dimension&quot; of a given learning problem in conjunction with the neural architecture (the objective landscape). This is equivalent to approximating the minimum parameterization of an objective landscape, and may have practical application in model compression. We extend these methods with a series of experiments, mostly concerning using nonlinear transformations, in order to find a more minimal intrinsic dimension. For ECE472 final project.
    links:
      Source: https://github.com/jlam55555/intrinsic-dimension-projections
      Paper: http://files.lambdalambda.ninja/reports/20-21_fall/ece472_intrinsic_dimension_projections.pdf
      Presentation: http://files.lambdalambda.ninja/reports/20-21_fall/ece472_intrinsic_dimension_projections_presentation.pdf
  Simulating Digital Coding Schemes (w/ Noise Distortion) in MATLAB:
    anchor: digital_coding
    year: 2020
    desc: Similar to the projects on digital and analog modulation schemes below, but experimenting with a linear block code (LBC) and error detection/correction. For ECE300.
    links:
      Report: http://files.lambdalambda.ninja/reports/20-21_fall/ece300_proj3.lam_shersher_skok_yanofsky.pdf
  Simulating Digital Modulation Schemes (w/ Noise Distortion) in MATLAB:
    anchor: digital_modulation
    year: 2020
    desc: Similar to the project on analog modulation schemes below, but with digital modulation schemes. Experimented with binary antipodal, binary orthogonal, PSK, DPSK, QAM. Theoretical results are largely reproduced. For ECE300.
    links:
      Report: http://files.lambdalambda.ninja/reports/20-21_fall/ece300_proj2.dehority_hong_lam.pdf
  Checkers-playing AI:
    anchor: checkers_ai
    year: 2020
    desc: Checkers-playing AI using minimax-search with alpha-beta pruning and time-limited iterative deepening. Uses a custom heuristic based off of common Checkers strategy. Both a C++ and a Chez Scheme version were written, using very similar data structures and optimizations; Scheme version reaches roughly the same depth as C++ version. Scheme version attempts to remain mostly functional (e.g., using an immutable bytevector state representations, which allow rewalking the "history" of states like in Redux); also includes some LISP-specific features such as a multi-level escape continuation to exit the search when time limit is exceeded. For ECE469.
    links:
      Source: https://www.github.com/jlam55555/checkers-ai
      Report: http://files.lambdalambda.ninja/reports/20-21_fall/ece469_proj1_checkers_ai.pdf
  Reproducing MobileNets on CIFAR-10:
    anchor: mobilenets
    year: 2020
    desc: Created an implementation of the MobileNet architecture described in arXiv:1704.04861, and verified some of the results produced by the author. Used CIFAR-10 rather than ImageNet due to computational limitations. Assignment was to reproduce the findings of a research paper. Midterm project for ECE472.
    links:
      Report: http://files.lambdalambda.ninja/reports/20-21_fall/ece472_midterm_mobilenets.lam_lee.pdf
  Simulating Analog Modulation Schemes (w/ Noise Distortion) in MATLAB:
    anchor: analog_modulation
    year: 2020
    desc: Used MATLAB to simulate signals and analog modulation schemes (conventional AM, SSB AM, FM, PM), and the results of applying changes to the parameters or of adding noise to the modulated signal. Able to reproduce most theoretical results fairly well. For ECE300.
    links:
      Report: http://files.lambdalambda.ninja/reports/20-21_fall/ece300_proj1.pdf
  'How-to Series: Scheme Lisp':
    anchor: how_to_lisp
    year: 2020
    desc: 'Exploratory session into Scheme as the first installation of the IEEExACM club How-to series. An early attempt of mine to explain the usefulness of declarative (as opposed to imperative) programming, homoiconicity, a minimal syntax, the <code>cons</code> building block, etc. Performed to an audience of over 20 attendees.'
    links:
      Video: http://files.lambdalambda.ninja/reports/20-21_nonacademic/how_to_scheme.mp4
      Transcript: http://files.lambdalambda.ninja/reports/20-21_nonacademic/how_to_scheme.pdf
  Assorted Frequentist Machine Learning Techniques:
    anchor: freq_ml
    year: 2020
    desc: 'Experimenting with various machine learning techniques for ECE475. This includes supervised learning: linear regression/classification, ensemble classification (gradient-boosted trees and random forests), recommender systems; and unsupervised learning: market-basket analysis. Also explored proper validation techniques and regularization techniques: L1, L2, complexity pruning for decision trees.'
    links:
      Linear regression w/ L1, L2 regularization: http://files.lambdalambda.ninja/reports/20-21_fall/ece475_proj1.pdf
      Logistic (binomial and multinomial) regression with stepwise pruning, L1 regularization: http://files.lambdalambda.ninja/reports/20-21_fall/ece475_proj2.pdf
      Reproducing a wrong and correct methods for doing K-fold CV: http://files.lambdalambda.ninja/reports/20-21_fall/ece475_proj3.pdf
      Regression using gradient-boosted trees (xgboost) and random forests (sklearn): http://files.lambdalambda.ninja/reports/20-21_fall/ece475_proj4.pdf
      Comparing feature importance and performance betweeen GBT and RF: http://files.lambdalambda.ninja/reports/20-21_fall/ece475_proj5.pdf
      Market-basket analysis (mlxtend): http://files.lambdalambda.ninja/reports/20-21_fall/ece475_proj6.pdf
      Recommender systems, and an implementation using non-negative matrix factorization (NMF): http://files.lambdalambda.ninja/reports/20-21_fall/ece475_proj7.pdf
  Photocol Photo Gallery:
    anchor: photocol
    year: 2020
    desc: 'Explored various web design procedures and technologies, including but not limited to: CSRF injection attack, session cookies, Java Spring framework, React.JS, Bootstrap, HTTP protocols, containerization (w/ Docker), many-to-one relationships (e.g., access control) in PostgreSQL, prepared SQL statements, one-way hashing (w/ bcrypt), SQL foreign keys, etc. For ECE366.'
    links:
      Source: https://github.com/photocol
  Theremin:
    anchor: theremin
    year: 2019
    desc: Constructed a theremin (the instrument) using the principles of circuit design and operational amplifiers. Final project for ECE291.
    links:
      Report: http://files.lambdalambda.ninja/reports/19-20_fall/ece291_theremin_lab.zhang_lam.pdf
  Context-aware Sorting:
    anchor: sorting
    year: 2018
    desc: Implemented various common sorting algorithms adapted for provided datasets. Explored quicksort, counting/bin sort, indirect sort, insertion sort.
    links:
      Source: https://github.com/jlam55555/dsa-pa2
  '"The Regulators" Colorimetric Test Strip':
    anchor: regulators
    year: 2018
    desc: Engineering design project aimed towards providing a low-cost alternative to diabetes test strip. Uses a chemical that changes color based on glucose composition. Accompanying Android app to help determine glucose composition from color. (First time using React.) For EID101.
    links:
      Website: https://theregulators.github.io/
      Source: https://github.com/theregulators
  Tron:
    anchor: tron
    year: 2018
    desc: Recreated an 8x8 version of the Tron game in hardware as the Digital Logic Design final project. Involves use of CMOS 4000-series logic chips, flip-flops, and various timing optimizations. For ECE150.
    links:
      Report: http://files.lambdalambda.ninja/reports/18-19_fall/ece150_tron_project.kingsbury_lam.pdf
  Multiplayer Racing Game:
    anchor: racing_game
    year: 2018
    desc: Create Performance Task for AP CSP. Worked with <a href="https://github.com/rdk750">Rahul Kiefer</a>. Multiplayer "racing" game written with a Node.JS+socket.io backend, THREE.js 3D library, JS orientation library for smartphone controls. (Much of the same technology as Fruit Sensei.)
    links:
      Demo: https://racing-game-csp.herokuapp.com/
      Source: https://github.com/jlam55555/racing-game
      Report: http://files.lambdalambda.ninja/reports/17-18/apcsp_multiracer_create_performance_task.kiefer_lam.pdf
Hackathons:
  Itmine:
    anchor: itmine
    year: 2019
    desc: Itmine is a tool to help people not lose things. Generate a QR code to put on your belongings; if lost, it will generate a shipping label to the owner and give a small monetary award to the finder. Powered by the MEAN stack and the ShipEngine API. Submitted to the ERP Hackathon hosted by General Assembly.
    links:
      Demo: http://itmine.herokuapp.com/hiw
      Source: https://github.com/10b-erp
  Accelomap:
    anchor: accelomap
    year: 2018
    desc: Map out a region using accelerometer data, using the basic principle that distance is the second integral of acceleration. Won third place project at Stonybrook Local Hack Day 2018.
    links:
      Source: https://github.com/dubstepnium
  Fluorination:
    anchor: fluorination
    year: 2018
    desc: A gamified community with an education-focused forum. Won Best Use of Algolia award at HackCooper 2018.
    links:
      Source: https://github.com/FluorinationNation/fluorination-server
  MoMath Hackathon 2:
    anchor: momath_2018
    year: 2018
    desc: 'Created a number of projects for the MoMath: Expressions 2018 hackathon. See repo for more details.'
    links:
      MoMath showcase: http://hackathon.momath.org/showcase/
      Source: https://github.com/jlam55555/howitfeelstochew6gum
  Fruit Sensei:
    anchor: fruit_sensei
    year: 2017
    desc: Use your smartphone as a controller in a fruit-slicing game! Back when Fruit Sensei was popular. Won Best Game at StuyHacks Local Hack Day 2017.
    links:
      Devpost: https://devpost.com/software/fruit-sensei
      Source: https://github.com/FruitSensei/fruitsensei.github.io
  MoMath Hackathon 1:
    anchor: momath_2017
    year: 2017
    desc: 'Created a number of projects for the MoMath: Expressions 2017 hackathon. See repo for more details.'
    links:
      Source: https://github.com/poobaloofa/howitfeelstochew5gum
  RingTune:
    anchor: ringtune
    year: 2016
    desc: First hackathon project (LIHacks 2016)! Worked with <a href="https://github.com/All88keys">Chris Vassallo</a> to create a user-guided music generator using common sequences of notes. Won Most Entrepreneurial award.
    links:
      Demo: https://jlam55555.github.io/ringtune-website/
      Source: https://github:com/jlam55555/ringtune-website
Commissioned projects:
  Cooper Union EOYS 2021:
    anchor: eoys2021
    year: 2021
    desc: 'Online presence for School of Engineering 2021 EOYS during COVID-19 pandemic. Performed technical advising and support: hosting & domain name (w/ GitHub Pages), Vue/Vite framework setup, Bootstrap integration.'
    links:
      See it: https://engineeringeoys.cooper.edu/
      Source: https://github.com/evo2000/EOYS
  Maroon and Gold Labs:
    anchor: mag_labs
    year: 2019
    desc: Maroon and Gold Labs incubator for Cooper students. Created on Strikingly. Implemented a DonorBox integration, designed several visual assets, and provided technical and design-oriented advice.
    links:
      See it: https://www.maroonandgoldlabs.org/home
  Safe Rides of Redding and Easton Web-App:
    anchor: safe_rides
    year: 2018
    desc: Web app for the newly-founded "Safe Rides" program at JBHS. Provides a centralized management (Node.JS web backend) to communicate between volunteers and clients. Volunteers have to check in each time they reach a checkpoint on the route, and relevant parties are notified and their location shown on a GPS map. Uses Twilio to send SMS messages to relevant parties. Not operational anymore.
    links:
      See it: https://safe-rides-redding-easton.herokuapp.com/
      Source: https://github.com/jlam55555/srre-client
Miscellaneous personal projects:
  Groovy Maven Template:
    anchor: groovy_maven
    year: 2020
    desc: Template for compiling a Groovy application into an uber-JAR using mvn so that you can easily run export it without requiring a Groovy installation on the client.
    links:
      Source: https://github.com/jlam55555/groovy-maven-template
  Catcake:
    anchor: catcake
    year: 2020
    desc: Second attempt at making a gallery website. Preceded by Gatollery.
    links:
      Demo: https://catcake.herokuapp.com/
      Source: https://github.com/jlam55555/catcake
  Project Euler in Java:
    anchor: pe_java
    year: 2020
    desc: Second attempt at handling Project Euler, but in Java (first time was in JS). Slightly less naive implementations.
    links:
      Source: https://github.com/jlam55555/project-euler-java
  Gatollery:
    anchor: gatollery
    year: 2019
    desc: First attempt at making a gallery website. Superseceded by Catcake.
    links:
      Demo: https://gatollery.github.io/
      Source: https://github.com/gatollery/gatollery.github.io
  Color layer generator:
    anchor: color_layers
    year: 2019
    desc: CSS classes as "color filters" using Sass.
    links:
      Demo: https://jlam55555.github.io/color-layer-generator/examples/example.html
      Source: https://github.com/jlam55555/color-layer-generator
  Everything is Sheep (EiS):
    anchor: eis
    year: 2018
    desc: My (current) personal blog. Built on a Node.JS backend, hosted on Heroku. No front end frameworks employed (all JS/CSS is vanilla).
    links:
      Demo: http://everything-is-sheep.herokuapp.com/
  Unscrambler:
    anchor: unscrambler
    year: 2018
    desc: Anagram finder. Additionally, scrambles words as a game for you to find an anagram.
    links:
      Demo: http://jlam55555.github.io/unscrambler/
      Source: https://github.com/jlam55555/unscrambler
  Blank new tab Chrome extension:
    anchor: blank_new_tab
    year: 2018
    desc: Simplicity in the new tab page on Google Chrome. For those who don't like clutter.
    links:
      Source: https://github.com/jlam55555/simple-new-tab
  Remeet:
    anchor: remeet
    year: 2018
    desc: Messing around with WebRTC for P2P video streaming.
    links:
      Demo: http://remeet.herokuapp.com/
      Source: https://github.com/jlam55555/remeet
  Personal website (v2):
    anchor: website_v2
    year: 2018
    desc: Second iteration of a personal website.
    links:
      Demo: https://jlam55555.github.io/personal-new/
      Source: https://github.com/jlam55555/personal-new
  Elastic band:
    anchor: elastic_band
    year: 2018
    desc: Playing around with what we learned in physics class. Spring/elastic band simulation using p5/processing.js. Adjustable spring constants.
    links:
      Demo: https://jlam55555.github.io/elastic-band/
      Source: https://github.com/jlam55555/elastic-band
  Gravity points:
    anchor: gravity_points
    year: 2018
    desc: Using what we learned in AP Physics.
    links:
      Demo: https://jlam55555.github.io/p5-gravity-field/
      Source: https://github.com/jlam55555/p5-gravity-field
  Barlow Bowling website:
    anchor: barlow_bowling
    year: 2018
    desc: Website to keep track of scores for the JBHS bowling club and predict Varsity players for the upcoming week. First time attempting to use Angular Material.
    links:
      Demo: https://jbhsbowling.github.io/
      Source: https://github.com/jbhsbowling/jbhsbowling.github.io
  Haiku generator:
    anchor: haikus
    year: 2018
    desc: Randomly scrapes random Wikipedia pages and chooses sentences that start with a 5-7-5 syllable pattern (according to Datamuse API).
    links:
      Source: https://github.com/jlam55555/haiku-generator
  Fractals:
    anchor: fractals
    year: 2016
    desc: Generate fractals with Chaos game (Sierpinski triangle &amp; chaos squares/hexagons), the Thue-Morse sequence (Koch curve), and convergence of complex series (Julia/Mendelbrot sets)
    links:
      Julia set: https://jsfiddle.net/jlam55555/ay4nqfqL/5/
      Mendelbrot set: https://jsfiddle.net/jlam55555/3bgvt3c4/2/
      Koch curve: https://jsfiddle.net/jlam55555/a1qshh6x/7/
      Chaos game square: https://jsfiddle.net/jlam55555/m0gyzpt0/22/
      Chaos game hexagon: https://jsfiddle.net/jlam55555/tkduy1o3/3/
  Memory game:
    anchor: memory_game
    year: 2016
    desc: Simple memory game in JS.
    links:
      Demo: http://jlam55555.github.io/memory-game/
      Source: https://github.com/jlam55555/memory-game
  Tic Tac Toe:
    anchor: ttt_js
    year: 2016
    desc: Simple JS tic tac toe. Doesn't play very well.
    links:
      Demo: https://jlam55555.github.io/tic-tac-toe/
      Source: https://github.com/jlam55555/tic-tac-toe
  rps-random:
    anchor: rps
    year: 2016
    desc: Rock paper scissors against a random computer opponent.
    links:
      Source: https://github.com/jlam55555/rps-random
  ttt:
    anchor: ttt_c
    year: 2016
    desc: A simple tic-tac-toe player in C.
    links:
      Source: https://github.com/jlam55555/ttt
  Paste to HTML:
    anchor: paste_html
    year: 2016
    desc: If you copy HTML from a webpage using Ctrl+C, you can paste it into this input box (using Ctrl+V) and get the underlying HTML. Handy little tool.
    links:
      Demo: https://jlam55555.github.io/paste-to-html/
      Source: https://github.com/jlam55555/paste-to-html
  Word visualizer:
    anchor: word_vis
    year: 2016
    desc: Save image as text! Also change font family, size, (some) lighting, letter colors, and more! Can be used to imitate simple text-only logos.
    links:
      Demo: https://jlam55555.github.io/word-visualizer/
      Source: https://github.com/jlam55555/word-visualizer
  htmldebug:
    anchor: htmldebug
    year: 2016
    desc: My attempt at making a simple debugging console like Firebug, since the browser developer console was slow (at the time).
    links:
      Source: https://github.com/jlam55555/htmldebug
  Nutmeg Bowl website proposal:
    anchor: nb_website
    year: 2016
    desc: My second attempt at revamping the original Nutmeg Bowl of Fairfield website. They didn't accept it.
    links:
      Demo: https://jlam55555.github.io/nutmegbowl/
      Source: https://github.com/jlam55555/nutmegbowl
  jkcd:
    anchor: jkcd
    year: 2016
    desc: Desktop xkcd viewer with a JavaFX GUI. Requires Java 8+.
    links:
      Source: https://github.com/jlam55555/jkcd
  xkcd-term:
    anchor: xkcd_term
    year: 2016
    desc: Desktop xkcd viewer in the (Linux) terminal. Requires ImageMagick.
    links:
      Source: https://github.com/jlam55555/xkcd-term
  Pop the lock:
    anchor: pop_the_lock
    year: 2016
    desc: Imitation of the original game of the same name.
    links:
      Demo: http://jlam55555.github.io/pop-the-lock/
      Source: https://github.com/jlam55555/pop-the-lock
  Real coding time:
    anchor: real_coding_time
    year: 2016
    desc: Real-time coding in the browser (like Google Docs but for code). Similar to the original chat, but experimented with syntax highlighting for inputted text.
    links:
      Client source: https://github.com/jlam55555/realcodingtime
      Server source: https://github.com/jlam55555/real-coding-time
  The Homework Life:
    anchor: thl
    year: 2016-18
    desc: First attempt at a blog. MySQL backend. Lazy-loading front-end. All the posts have been migrated to Everything is Sheep. Used to be hosted at thehomeworklife.co.nf.
    links:
      Source: https://github.com/jlam55555/the-homework-life
  Periodic Letters:
    anchor: periodic_letters
    year: 2016
    desc: Fun tool to make strings of text out of periodic element boxes. I used this to make a Christmas tree out of some Christmas song for Honors Chemistry.
    links:
      Demo: http://jlam55555.github.io/periodic-letters/
      Source: https://github.com/jlam55555/periodic-letters
  Balencistry:
    anchor: balencistry
    year: 2016
    desc: Visual aid to help when balancing chemical equations for Honors chemistry.
    links:
      Demo: http://jlam55555.github.io/balencistry/
      Source: https://github.com/jlam55555/balencistry
  Personal website (v1):
    anchor: website_v1
    year: 2015
    desc: First iteration of a personal website.
    links:
      Demo: https://jlam55555.github.io/personal-old/
      Source: https://github.com/jlam55555/personal-old
  Chat:
    anchor: chat
    year: 2015
    desc: My first Node.js application (!!!). Learned how to use ExpressJS and socket.io to create a real-time chat server. Was also playing around with Chrome extensions at the time and made one that connects to the main chat server.
    links:
      Source: https://github.com/jlam55555/chat
      Chrome extension source: https://github.com/jlam55555/chat-chrome-extension
  Speller:
    anchor: speller
    year: 2015
    desc: Aimed to help my sister win the regional Spelling Bee (which she did!). Playing around with the voice using the native <a href="https://blog.teamtreehouse.com/getting-started-speech-synthesis-api">JS speech synthesis API</a>.
    links:
      Demo: http://jlam55555.github.io/speller/
      Source: https://github.com/jlam55555/speller
  Planetary:
    anchor: planetary
    year: 2015
    desc: Fun little visual. Props to <a href="https://www.hunterlightman.com/">Hunter Lightman</a> for the visuals and showing me how to use trig to animate circles with code for the first time.
    links:
      Demo: http://jlam55555.github.io/planetary/
      Source: https://github.com/jlam55555/planetary
  Flappy:
    anchor: flappy
    year: 2015
    desc: Naive attempt at Flappy bird. Buggy but kind of fun.
    links:
      Demo: http://jlam55555.github.io/flappy/
      Source: https://github.com/jlam55555/flappy
  (Early attempts at) Project Euler in JS:
    anchor: pe_js
    year: 2015
    desc: First attempt at Project Euler. Many of these are brute force. Written while attending a summer program for learning C.
    links:
      Source: https://github.com/jlam55555/ProjectEuler
  '"Programath" PLTW Final Project':
    anchor: programath
    year: 2014
    desc: First website presented to peers. Calculator tools (in JS), and an explanation of how HTML/CSS/JS/PHP fit together to form a website.
    links:
      Demo: https://jlam55555.github.io/programath/
